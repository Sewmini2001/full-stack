/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ButtonManager } from '../../lib/button-manager';
import { Directive, Input } from '@angular/core';
import { name as softwareId, version as softwareVersion } from '../package.json';
import { debounce } from '../../lib/debounce';
import * as i0 from "@angular/core";
export class GooglePayButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.manager = new ButtonManager({
            cssSelector: 'google-pay-button',
            softwareInfoId: softwareId,
            softwareInfoVersion: softwareVersion,
        });
        this.initializeButton = debounce(() => {
            if (!this.assertRequiredProperty('paymentRequest')) {
                return;
            }
            if (!this.assertRequiredProperty('environment')) {
                return;
            }
            const config = {
                paymentRequest: this.paymentRequest,
                environment: this.environment,
                existingPaymentMethodRequired: this.existingPaymentMethodRequired,
                onPaymentDataChanged: this.paymentDataChangedCallback,
                onPaymentAuthorized: this.paymentAuthorizedCallback,
                buttonColor: this.buttonColor,
                buttonType: this.buttonType,
                buttonSizeMode: this.buttonSizeMode,
                buttonLocale: this.buttonLocale,
                onReadyToPayChange: result => {
                    if (this.readyToPayChangeCallback) {
                        this.readyToPayChangeCallback(result);
                    }
                    this.dispatch('readytopaychange', result);
                },
                onCancel: reason => {
                    if (this.cancelCallback) {
                        this.cancelCallback(reason);
                    }
                    this.dispatch('cancel', reason);
                },
                onError: error => {
                    if (this.errorCallback) {
                        this.errorCallback?.(error);
                    }
                    this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error }));
                },
                onLoadPaymentData: paymentData => {
                    if (this.loadPaymentDataCallback) {
                        this.loadPaymentDataCallback(paymentData);
                    }
                    this.dispatch('loadpaymentdata', paymentData);
                },
                onClick: event => {
                    if (this.clickCallback) {
                        this.clickCallback?.(event);
                    }
                },
            };
            this.manager.configure(config);
        });
    }
    get isReadyToPay() {
        return this.manager.isReadyToPay;
    }
    ngOnInit() {
        return this.manager.mount(this.elementRef.nativeElement);
    }
    ngOnChanges() {
        return this.initializeButton();
    }
    assertRequiredProperty(name) {
        const value = this[name];
        if (value === null || value === undefined) {
            this.throwError(Error(`Required property not set: ${name}`));
            return false;
        }
        return true;
    }
    /**
     * Throws an error.
     *
     * Used for testing purposes so that the method can be spied on.
     */
    throwError(error) {
        throw error;
    }
    dispatch(type, detail) {
        this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {
            bubbles: true,
            cancelable: false,
            detail,
        }));
    }
}
GooglePayButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: GooglePayButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
GooglePayButtonComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.2", type: GooglePayButtonComponent, selector: "google-pay-button", inputs: { paymentRequest: "paymentRequest", environment: "environment", existingPaymentMethodRequired: "existingPaymentMethodRequired", buttonColor: "buttonColor", buttonType: "buttonType", buttonSizeMode: "buttonSizeMode", buttonLocale: "buttonLocale", paymentDataChangedCallback: "paymentDataChangedCallback", paymentAuthorizedCallback: "paymentAuthorizedCallback", readyToPayChangeCallback: "readyToPayChangeCallback", loadPaymentDataCallback: "loadPaymentDataCallback", cancelCallback: "cancelCallback", errorCallback: "errorCallback", clickCallback: "clickCallback" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: GooglePayButtonComponent, decorators: [{
            type: Directive,
            args: [{
                    selector: 'google-pay-button',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { paymentRequest: [{
                type: Input
            }], environment: [{
                type: Input
            }], existingPaymentMethodRequired: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonType: [{
                type: Input
            }], buttonSizeMode: [{
                type: Input
            }], buttonLocale: [{
                type: Input
            }], paymentDataChangedCallback: [{
                type: Input
            }], paymentAuthorizedCallback: [{
                type: Input
            }], readyToPayChangeCallback: [{
                type: Input
            }], loadPaymentDataCallback: [{
                type: Input
            }], cancelCallback: [{
                type: Input
            }], errorCallback: [{
                type: Input
            }], clickCallback: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,