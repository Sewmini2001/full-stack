/// <reference types="googlepay" />
import { ElementRef, OnChanges, OnInit } from '@angular/core';
import * as i0 from "@angular/core";
export declare class GooglePayButtonComponent implements OnInit, OnChanges {
    private elementRef;
    private manager;
    paymentRequest: google.payments.api.PaymentDataRequest;
    environment: google.payments.api.Environment;
    existingPaymentMethodRequired: boolean;
    buttonColor?: google.payments.api.ButtonColor;
    buttonType?: google.payments.api.ButtonType;
    buttonSizeMode?: google.payments.api.ButtonSizeMode;
    buttonLocale?: string;
    paymentDataChangedCallback?: google.payments.api.PaymentDataChangedHandler;
    paymentAuthorizedCallback?: google.payments.api.PaymentAuthorizedHandler;
    readyToPayChangeCallback?: (result: any) => void;
    loadPaymentDataCallback?: (paymentData: google.payments.api.PaymentData) => void;
    cancelCallback?: (reason: google.payments.api.PaymentsError) => void;
    errorCallback?: (error: Error | google.payments.api.PaymentsError) => void;
    clickCallback?: (event: Event) => void;
    constructor(elementRef: ElementRef);
    get isReadyToPay(): boolean | undefined;
    ngOnInit(): Promise<void>;
    ngOnChanges(): Promise<void>;
    private initializeButton;
    private assertRequiredProperty;
    /**
     * Throws an error.
     *
     * Used for testing purposes so that the method can be spied on.
     */
    private throwError;
    private dispatch;
    static ɵfac: i0.ɵɵFactoryDeclaration<GooglePayButtonComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<GooglePayButtonComponent, "google-pay-button", never, { "paymentRequest": "paymentRequest"; "environment": "environment"; "existingPaymentMethodRequired": "existingPaymentMethodRequired"; "buttonColor": "buttonColor"; "buttonType": "buttonType"; "buttonSizeMode": "buttonSizeMode"; "buttonLocale": "buttonLocale"; "paymentDataChangedCallback": "paymentDataChangedCallback"; "paymentAuthorizedCallback": "paymentAuthorizedCallback"; "readyToPayChangeCallback": "readyToPayChangeCallback"; "loadPaymentDataCallback": "loadPaymentDataCallback"; "cancelCallback": "cancelCallback"; "errorCallback": "errorCallback"; "clickCallback": "clickCallback"; }, {}, never, never, false, never>;
}
