{"version":3,"file":"google-pay-button-angular.mjs","sources":["../../../lib/load-script.ts","../../../lib/button-manager.ts","../../../lib/debounce.ts","../../lib/google-pay-button.component.ts","../../lib/google-pay-button.module.ts","../../../angular-public-api.ts","../../../google-pay-button-angular.ts"],"sourcesContent":["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\nlet cachedScripts: Record<string, Promise<any>> = {};\n\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\nexport function loadScript(src: string): Promise<void> {\n  const existing = cachedScripts[src];\n  if (existing) {\n    return existing;\n  }\n\n  const promise = new Promise<void>((resolve, reject) => {\n    // Create script\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n\n    // Script event listener callbacks for load and error\n    const onScriptLoad = (): void => {\n      resolve();\n    };\n\n    const onScriptError = (): void => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      cleanup();\n\n      // Remove from cachedScripts so that we can try loading again\n      delete cachedScripts[src];\n      script.remove();\n\n      reject(new Error(`Unable to load script ${src}`));\n    };\n\n    script.addEventListener('load', onScriptLoad);\n    script.addEventListener('error', onScriptError);\n\n    // Add script to document body\n    document.body.appendChild(script);\n\n    // Remove event listeners on cleanup\n    function cleanup(): void {\n      script.removeEventListener('load', onScriptLoad);\n      script.removeEventListener('error', onScriptError);\n    }\n  });\n\n  cachedScripts[src] = promise;\n\n  return promise;\n}\n\n/**\n * Clears the script cache. Used for testing purposes only.\n */\nexport function clearScriptCache(): void {\n  cachedScripts = {};\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable react/no-is-mounted */\n\nimport { loadScript } from '../lib/load-script';\n\nexport interface ReadyToPayChangeResponse {\n  isButtonVisible: boolean;\n  isReadyToPay: boolean;\n  paymentMethodPresent?: boolean;\n}\n\nexport interface Config {\n  environment: google.payments.api.Environment;\n  existingPaymentMethodRequired?: boolean;\n  paymentRequest: google.payments.api.PaymentDataRequest;\n  onPaymentDataChanged?: google.payments.api.PaymentDataChangedHandler;\n  onPaymentAuthorized?: google.payments.api.PaymentAuthorizedHandler;\n  onLoadPaymentData?: (paymentData: google.payments.api.PaymentData) => void;\n  onCancel?: (reason: google.payments.api.PaymentsError) => void;\n  onError?: (error: Error | google.payments.api.PaymentsError) => void;\n  onReadyToPayChange?: (result: ReadyToPayChangeResponse) => void;\n  onClick?: (event: Event) => void;\n  buttonColor?: google.payments.api.ButtonColor;\n  buttonType?: google.payments.api.ButtonType;\n  buttonSizeMode?: google.payments.api.ButtonSizeMode;\n  buttonLocale?: string;\n}\n\ninterface ButtonManagerOptions {\n  cssSelector: string;\n  softwareInfoId: string;\n  softwareInfoVersion: string;\n}\n\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\nexport class ButtonManager {\n  private client?: google.payments.api.PaymentsClient;\n  private config?: Config;\n  private element?: Element;\n  private options: ButtonManagerOptions;\n  private oldInvalidationValues?: any[];\n\n  isReadyToPay?: boolean;\n  paymentMethodPresent?: boolean;\n\n  constructor(options: ButtonManagerOptions) {\n    this.options = options;\n  }\n\n  getElement(): Element | undefined {\n    return this.element;\n  }\n\n  private isGooglePayLoaded(): boolean {\n    return 'google' in (window || global) && !!google?.payments?.api?.PaymentsClient;\n  }\n\n  async mount(element: Element): Promise<void> {\n    if (!this.isGooglePayLoaded()) {\n      try {\n        await loadScript('https://pay.google.com/gp/p/js/pay.js');\n      } catch (err) {\n        if (this.config?.onError) {\n          this.config.onError(err as Error);\n        } else {\n          console.error(err);\n        }\n      }\n    }\n\n    this.element = element;\n    if (element) {\n      this.appendStyles();\n      if (this.config) {\n        this.updateElement();\n      }\n    }\n  }\n\n  unmount(): void {\n    this.element = undefined;\n  }\n\n  configure(newConfig: Config): Promise<void> {\n    let promise: Promise<void> | undefined = undefined;\n    this.config = newConfig;\n    if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n      promise = this.updateElement();\n    }\n    this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n\n    return promise ?? Promise.resolve();\n  }\n\n  /**\n   * Creates client configuration options based on button configuration\n   * options.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createClientOptions(config: Config): google.payments.api.PaymentOptions {\n    const clientConfig: google.payments.api.PaymentOptions = {\n      environment: config.environment,\n      merchantInfo: this.createMerchantInfo(config),\n    };\n\n    if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n      clientConfig.paymentDataCallbacks = {};\n\n      if (config.onPaymentDataChanged) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n          const result = config.onPaymentDataChanged!(paymentData);\n          return result || ({} as google.payments.api.PaymentDataRequestUpdate);\n        };\n      }\n\n      if (config.onPaymentAuthorized) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n          const result = config.onPaymentAuthorized!(paymentData);\n          return result || ({} as google.payments.api.PaymentAuthorizationResult);\n        };\n      }\n    }\n\n    return clientConfig;\n  }\n\n  private createIsReadyToPayRequest(config: Config): google.payments.api.IsReadyToPayRequest {\n    const paymentRequest = config.paymentRequest;\n    const request: google.payments.api.IsReadyToPayRequest = {\n      apiVersion: paymentRequest.apiVersion,\n      apiVersionMinor: paymentRequest.apiVersionMinor,\n      allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n      existingPaymentMethodRequired: config.existingPaymentMethodRequired,\n    };\n\n    return request;\n  }\n\n  /**\n   * Constructs `loadPaymentData` request object based on button configuration.\n   *\n   * It infers request properties like `shippingAddressRequired`,\n   * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n   * based on the presence of their associated options and parameters. It also\n   * infers `callbackIntents` based on the callback methods defined in button\n   * configuration.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createLoadPaymentDataRequest(config: Config): google.payments.api.PaymentDataRequest {\n    const request = {\n      ...config.paymentRequest,\n      merchantInfo: this.createMerchantInfo(config),\n    };\n\n    // TODO: #13 re-enable inferrence if/when we agree as a team\n\n    return request;\n  }\n\n  private createMerchantInfo(config: Config): google.payments.api.MerchantInfo {\n    const merchantInfo: google.payments.api.MerchantInfo = {\n      ...config.paymentRequest.merchantInfo,\n    };\n\n    // apply softwareInfo if not set\n    if (!merchantInfo.softwareInfo) {\n      merchantInfo.softwareInfo = {\n        id: this.options.softwareInfoId,\n        version: this.options.softwareInfoVersion,\n      };\n    }\n\n    return merchantInfo;\n  }\n\n  private isMounted(): boolean {\n    return this.element != null && this.element.isConnected !== false;\n  }\n\n  private removeButton(): void {\n    if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n      for (const child of Array.from(this.element.children)) {\n        if (child.tagName !== 'STYLE') {\n          child.remove();\n        }\n      }\n    }\n  }\n\n  private async updateElement(): Promise<void> {\n    if (!this.isMounted()) return;\n    const element = this.getElement()!;\n\n    if (!this.config) {\n      throw new Error('google-pay-button: Missing configuration');\n    }\n\n    // remove existing button\n    this.removeButton();\n\n    this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\n\n    const buttonOptions: google.payments.api.ButtonOptions = {\n      buttonType: this.config.buttonType,\n      buttonColor: this.config.buttonColor,\n      buttonSizeMode: this.config.buttonSizeMode,\n      buttonLocale: this.config.buttonLocale,\n      onClick: this.handleClick,\n      allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods,\n    };\n\n    const rootNode = element.getRootNode();\n    if (rootNode instanceof ShadowRoot) {\n      buttonOptions.buttonRootNode = rootNode;\n    }\n\n    // pre-create button\n    const button = this.client.createButton(buttonOptions);\n\n    this.setClassName(element, [element.className, 'not-ready']);\n    element.appendChild(button);\n\n    let showButton = false;\n    let readyToPay: google.payments.api.IsReadyToPayResponse | undefined;\n\n    try {\n      readyToPay = await this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\n      showButton =\n        (readyToPay.result && !this.config.existingPaymentMethodRequired)\n        || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)\n        || false;\n    } catch (err) {\n      if (this.config.onError) {\n        this.config.onError(err as Error);\n      } else {\n        console.error(err);\n      }\n    }\n\n    if (!this.isMounted()) return;\n\n    if (showButton) {\n      try {\n        this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\n      } catch (err) {\n        console.log('Error with prefetch', err);\n      }\n\n      // remove hidden className\n      this.setClassName(\n        element,\n        (element.className || '').split(' ').filter(className => className && className !== 'not-ready'),\n      );\n    }\n\n    if (this.isReadyToPay !== readyToPay?.result || this.paymentMethodPresent !== readyToPay?.paymentMethodPresent) {\n      this.isReadyToPay = !!readyToPay?.result;\n      this.paymentMethodPresent = readyToPay?.paymentMethodPresent;\n\n      if (this.config.onReadyToPayChange) {\n        const readyToPayResponse: ReadyToPayChangeResponse = {\n          isButtonVisible: showButton,\n          isReadyToPay: this.isReadyToPay,\n        };\n\n        if (this.paymentMethodPresent) {\n          readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\n        }\n\n        this.config.onReadyToPayChange(readyToPayResponse);\n      }\n    }\n  }\n\n  /**\n   * Handles the click event of the Google Pay button.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  handleClick = async (event: Event): Promise<void> => {\n    const config = this.config;\n    if (!config) {\n      throw new Error('google-pay-button: Missing configuration');\n    }\n\n    const request = this.createLoadPaymentDataRequest(config);\n\n    try {\n      if (config.onClick) {\n        config.onClick(event);\n      }\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      const result = await this.client!.loadPaymentData(request);\n\n      if (config.onLoadPaymentData) {\n        config.onLoadPaymentData(result);\n      }\n    } catch (err) {\n      if ((err as google.payments.api.PaymentsError).statusCode === 'CANCELED') {\n        if (config.onCancel) {\n          config.onCancel(err as google.payments.api.PaymentsError);\n        }\n      } else if (config.onError) {\n        config.onError(err as google.payments.api.PaymentsError);\n      } else {\n        console.error(err);\n      }\n    }\n  };\n\n  private setClassName(element: Element, classNames: string[]): void {\n    const className = classNames.filter(name => name).join(' ');\n    if (className) {\n      element.className = className;\n    } else {\n      element.removeAttribute('class');\n    }\n  }\n\n  private appendStyles(): void {\n    if (typeof document === 'undefined') return;\n\n    const rootNode = this.element?.getRootNode() as Document | ShadowRoot | undefined;\n    const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${\n      this.config?.buttonLocale\n    }`;\n\n    // initialize styles if rendering on the client:\n    if (rootNode) {\n      if (!rootNode.getElementById?.(styleId)) {\n        const style = document.createElement('style');\n        style.id = styleId;\n        style.type = 'text/css';\n        style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n\n        if (rootNode instanceof Document && rootNode.head) {\n          rootNode.head.appendChild(style);\n        } else {\n          rootNode.appendChild(style);\n        }\n      }\n    }\n  }\n\n  private isClientInvalidated(newConfig: Config): boolean {\n    if (!this.oldInvalidationValues) return true;\n\n    const newValues = this.getInvalidationValues(newConfig);\n    return newValues.some((value, index) => value !== this.oldInvalidationValues![index]);\n  }\n\n  private getInvalidationValues(config: Config): any[] {\n    return [\n      config.environment,\n      config.existingPaymentMethodRequired,\n      !!config.onPaymentDataChanged,\n      !!config.onPaymentAuthorized,\n      config.buttonColor,\n      config.buttonType,\n      config.buttonLocale,\n      config.buttonSizeMode,\n      config.paymentRequest.merchantInfo.merchantId,\n      config.paymentRequest.merchantInfo.merchantName,\n      config.paymentRequest.merchantInfo.softwareInfo?.id,\n      config.paymentRequest.merchantInfo.softwareInfo?.version,\n      config.paymentRequest.allowedPaymentMethods,\n    ];\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\nexport function debounce<T>(func: (...params: any[]) => T, wait = 0): () => Promise<T> {\n  let timeout: number | undefined;\n\n  return function (...args: any[]): Promise<any> {\n    window.clearTimeout(timeout);\n\n    const later = function (): any {\n      timeout = undefined;\n      return func(...args);\n    };\n\n    return new Promise(resolve => {\n      timeout = window.setTimeout(() => {\n        const result = later();\n        resolve(result);\n      }, wait);\n    });\n  };\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ButtonManager, Config } from '../../lib/button-manager';\nimport { Directive, ElementRef, Input, OnChanges, OnInit } from '@angular/core';\nimport { name as softwareId, version as softwareVersion } from '../package.json';\nimport { debounce } from '../../lib/debounce';\n\n@Directive({\n  selector: 'google-pay-button',\n})\nexport class GooglePayButtonComponent implements OnInit, OnChanges {\n  private manager = new ButtonManager({\n    cssSelector: 'google-pay-button',\n    softwareInfoId: softwareId,\n    softwareInfoVersion: softwareVersion,\n  });\n\n  @Input() paymentRequest!: google.payments.api.PaymentDataRequest;\n  @Input() environment!: google.payments.api.Environment;\n  @Input() existingPaymentMethodRequired!: boolean;\n  @Input() buttonColor?: google.payments.api.ButtonColor;\n  @Input() buttonType?: google.payments.api.ButtonType;\n  @Input() buttonSizeMode?: google.payments.api.ButtonSizeMode;\n  @Input() buttonLocale?: string;\n  @Input() paymentDataChangedCallback?: google.payments.api.PaymentDataChangedHandler;\n  @Input() paymentAuthorizedCallback?: google.payments.api.PaymentAuthorizedHandler;\n  @Input() readyToPayChangeCallback?: (result: any) => void;\n  @Input() loadPaymentDataCallback?: (paymentData: google.payments.api.PaymentData) => void;\n  @Input() cancelCallback?: (reason: google.payments.api.PaymentsError) => void;\n  @Input() errorCallback?: (error: Error | google.payments.api.PaymentsError) => void;\n  @Input() clickCallback?: (event: Event) => void;\n\n  constructor(private elementRef: ElementRef) {}\n\n  get isReadyToPay(): boolean | undefined {\n    return this.manager.isReadyToPay;\n  }\n\n  ngOnInit(): Promise<void> {\n    return this.manager.mount(this.elementRef.nativeElement);\n  }\n\n  ngOnChanges(): Promise<void> {\n    return this.initializeButton();\n  }\n\n  private initializeButton = debounce(() => {\n    if (!this.assertRequiredProperty('paymentRequest')) {\n      return;\n    }\n\n    if (!this.assertRequiredProperty('environment')) {\n      return;\n    }\n\n    const config: Config = {\n      paymentRequest: this.paymentRequest,\n      environment: this.environment,\n      existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n      onPaymentDataChanged: this.paymentDataChangedCallback,\n      onPaymentAuthorized: this.paymentAuthorizedCallback,\n      buttonColor: this.buttonColor,\n      buttonType: this.buttonType,\n      buttonSizeMode: this.buttonSizeMode,\n      buttonLocale: this.buttonLocale,\n      onReadyToPayChange: result => {\n        if (this.readyToPayChangeCallback) {\n          this.readyToPayChangeCallback(result);\n        }\n        this.dispatch('readytopaychange', result);\n      },\n      onCancel: reason => {\n        if (this.cancelCallback) {\n          this.cancelCallback(reason);\n        }\n        this.dispatch('cancel', reason);\n      },\n      onError: error => {\n        if (this.errorCallback) {\n          this.errorCallback?.(error);\n        }\n        this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error }));\n      },\n      onLoadPaymentData: paymentData => {\n        if (this.loadPaymentDataCallback) {\n          this.loadPaymentDataCallback(paymentData);\n        }\n        this.dispatch('loadpaymentdata', paymentData);\n      },\n      onClick: event => {\n        if (this.clickCallback) {\n          this.clickCallback?.(event);\n        }\n      },\n    };\n\n    this.manager.configure(config);\n  });\n\n  private assertRequiredProperty(name: string): boolean {\n    const value = (this as any)[name];\n    if (value === null || value === undefined) {\n      this.throwError(Error(`Required property not set: ${name}`));\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Throws an error.\n   *\n   * Used for testing purposes so that the method can be spied on.\n   */\n  private throwError(error: Error): never {\n    throw error;\n  }\n\n  private dispatch<T>(type: string, detail: T): void {\n    this.elementRef.nativeElement.dispatchEvent(\n      new CustomEvent(type, {\n        bubbles: true,\n        cancelable: false,\n        detail,\n      }),\n    );\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GooglePayButtonComponent } from './google-pay-button.component';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [GooglePayButtonComponent],\n  imports: [],\n  exports: [GooglePayButtonComponent],\n})\nexport class GooglePayButtonModule {}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * Public API Surface of google-pay-button\n */\n\nexport * from './button-angular/lib/google-pay-button.component';\nexport * from './button-angular/lib/google-pay-button.module';\n\nexport { ReadyToPayChangeResponse } from './lib/button-manager';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './angular-public-api';\n"],"names":["softwareId","softwareVersion"],"mappings":"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"}